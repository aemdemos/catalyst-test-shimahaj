# .github/workflows/draft-aemy-pr.yml
# Manages PR draft state during AEMY workflow

name: Auto-draft PR during AEMY run

on:
  pull_request:
    types:
      - opened
      - reopened
      - labeled
      - unlabeled
      - ready_for_review

permissions: write-all

env:
  FAILING_LABELS: "amy-running,aemy-failed"
  AEMY_HELP_LABEL: "aemy-help"
  AEMY_MERGE_LABEL: "aemy-merge"

jobs:
  manage_draft:
    name: Manage PR draft status based on AEMY labels
    runs-on: ubuntu-latest
    steps:
<<<<<<< issue-31
      - name: Toggle draft status if needed
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const failingLabels = process.env.FAILING_LABELS.split(',').map(s => s.trim());
            const helpLabel = process.env.AEMY_HELP_LABEL.trim();
            const mergeLabel = process.env.AEMY_MERGE_LABEL.trim();

            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber,
            });

            const currentLabels = pr.labels.map(l => l.name);
            const hasFailing = currentLabels.some(l => failingLabels.includes(l));
            const hasHelp = currentLabels.includes(helpLabel);
            const hasMerge = currentLabels.includes(mergeLabel);

            // Convert PR to draft using GitHub's dedicated endpoint for reliability
            if (hasHelp && !pr.draft) {
              try {
                await github.rest.pulls.convertToDraft({ owner, repo, pull_number: prNumber });
                core.notice(`ℹ️ PR converted to draft due to '${helpLabel}' label.`);
              } catch (e) {
                core.warning(`convertToDraft failed (${e.message}); attempting fallback via update().`);
                await github.rest.pulls.update({ owner, repo, pull_number: prNumber, draft: true });
                core.notice(`ℹ️ PR marked as draft via fallback method.`);
              }
              return;
            }

            // Undraft PR when safe to merge
            if (!hasFailing && hasMerge && pr.draft) {
              await github.rest.pulls.update({ owner, repo, pull_number: prNumber, draft: false });
              core.notice(`✅ PR marked ready for review: AEMY processing complete and merge approved.`);
            } else {
              core.info(`ℹ️ No draft state change needed.`);
            }
=======
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Mark PR as draft if needed
        if: contains(github.event.pull_request.labels.*.name, 'aemy-help')
        run: |
          gh pr ready --undo ${{ github.event.pull_request.number }}
          echo "PR #${{ github.event.pull_request.number }} marked as draft"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Mark PR ready for review if needed
        if: contains(github.event.pull_request.labels.*.name, 'aemy-merge') && !contains(github.event.pull_request.labels.*.name, 'aemy-running') && !contains(github.event.pull_request.labels.*.name, 'aemy-failed')
        run: |
          gh pr ready ${{ github.event.pull_request.number }}
          echo "PR #${{ github.event.pull_request.number }} marked ready for review"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
>>>>>>> main
