# .github/workflows/draft-aemy-pr.yml
# AEMY processing readiness check - prevents merging during AEMY workflow execution
# Converts PR to draft when AEMY starts, acts as status check that fails while AEMY runs/fails
# Allows merge and marks PR ready when AEMY completes successfully with aemy-merge label

name: aemy-pr-readiness-check

on:
  pull_request:
    types: [labeled, unlabeled]

permissions:
  pull-requests: write
  contents: read

env:
  BLOCKING_LABELS: "aemy-running,aemy-failed"
  MERGE_LABEL: "aemy-merge"

jobs:
  manage-pr-state:
    name: Manage PR Draft State
    runs-on: ubuntu-latest
    
    steps:
      - name: Toggle draft status if needed
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const failingLabels = process.env.FAILING_LABELS.split(',').map(s => s.trim());
            const helpLabel = process.env.AEMY_HELP_LABEL.trim();
            const mergeLabel = process.env.AEMY_MERGE_LABEL.trim();

            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber,
            });

            const currentLabels = pr.labels.map(l => l.name);
            const hasFailing = currentLabels.some(l => failingLabels.includes(l));
            const hasHelp = currentLabels.includes(helpLabel);
            const hasMerge = currentLabels.includes(mergeLabel);

            // Convert PR to draft using GitHub's dedicated endpoint for reliability
            if (hasHelp && !pr.draft) {
              try {
                await github.rest.pulls.convertToDraft({ owner, repo, pull_number: prNumber });
                core.notice(`ℹ️ PR converted to draft due to '${helpLabel}' label.`);
              } catch (e) {
                core.warning(`convertToDraft failed (${e.message}); attempting fallback via update().`);
                await github.rest.pulls.update({ owner, repo, pull_number: prNumber, draft: true });
                core.notice(`ℹ️ PR marked as draft via fallback method.`);
              }
              return;
            }

            // Undraft PR when safe to merge
            if (!hasFailing && hasMerge && pr.draft) {
              await github.rest.pulls.update({ owner, repo, pull_number: prNumber, draft: false });
              core.notice(`✅ PR marked ready for review: AEMY processing complete and merge approved.`);
            } else {
              core.info(`ℹ️ No draft state change needed.`);
            }
      - uses: actions/checkout@v4

      - name: Convert PR to draft while AEMY is running
        if: contains(github.event.pull_request.labels.*.name, 'aemy-running')
        run: |
          gh pr ready --undo ${{ github.event.pull_request.number }} || exit 1
          echo "✅ PR converted to draft"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prevent merge - PR not ready due to AEMY processing
        if: |
          contains(github.event.pull_request.labels.*.name, 'aemy-running') ||
          contains(github.event.pull_request.labels.*.name, 'aemy-failed')
        run: |
          echo "❌ Cannot merge: AEMY processing in progress or failed"
          exit 1

      - name: Mark PR ready for review after AEMY completion
        if: |
          contains(github.event.pull_request.labels.*.name, env.MERGE_LABEL) && 
          !contains(github.event.pull_request.labels.*.name, 'aemy-running') &&
          !contains(github.event.pull_request.labels.*.name, 'aemy-failed')
        run: |
          gh pr ready ${{ github.event.pull_request.number }} || exit 1
          echo "✅ PR ready for review"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
